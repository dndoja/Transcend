{"version":3,"sources":["assets/images/transcend_logo_colored.svg","assets/images/transcend_title.svg","assets/images/transcend_down_arrow.svg","components/ColoredScrollbars.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ColoredScrollbars","props","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","rest","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","handleUpdate","bind","assertThisInitialized","renderView","renderThumb","values","top","setState","style","_ref","objectWithoutProperties","react_default","a","createElement","assign","className","objectSpread","_ref2","backgroundColor","borderRadius","lib","renderThumbHorizontal","renderThumbVertical","onUpdate","Component","App","ColoredScrollbars_ColoredScrollbars","autoHeight","autoHeightMin","autoHeightMax","particles_default","params","particlesConfig","src","downArrow","alt","logo","title","Boolean","window","location","hostname","match","WebFont","load","google","families","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29f07192.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/transcend_logo_colored.f1cab7ea.svg\";","module.exports = __webpack_public_path__ + \"static/media/transcend_title.87e0fcc0.svg\";","module.exports = __webpack_public_path__ + \"static/media/transcend_down_arrow.6a51bad8.svg\";","import React, { Component } from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nexport default class ColoredScrollbars extends Component {\r\n\r\n    constructor(props, ...rest) {\r\n        super(props, ...rest);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.renderView = this.renderView.bind(this);\r\n        this.renderThumb = this.renderThumb.bind(this);\r\n    }\r\n\r\n    handleUpdate(values) {\r\n        const { top } = values;\r\n        this.setState({ top });\r\n    }\r\n\r\n    renderView({ style, ...props }) {\r\n        return (\r\n            <div\r\n                className=\"box\"\r\n                style={{ ...style }}\r\n                {...props}/>\r\n        );\r\n    }\r\n\r\n    renderThumb({ style, ...props }) {\r\n        const thumbStyle = {\r\n            backgroundColor: `#FBDDFB`,\r\n            borderRadius:16\r\n        };\r\n        return (\r\n            <div\r\n                style={{ ...style, ...thumbStyle }}\r\n                {...props}/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Scrollbars\r\n                renderView={this.renderView}\r\n                renderThumbHorizontal={this.renderThumb}\r\n                renderThumbVertical={this.renderThumb}\r\n                onUpdate={this.handleUpdate}\r\n                {...this.props}/>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport logo from './assets/images/transcend_logo_colored.svg';\nimport title from './assets/images/transcend_title.svg';\nimport downArrow from './assets/images/transcend_down_arrow.svg'\n\nimport './stylesheets/App.css';\nimport Particles from 'react-particles-js';\nimport particlesConfig from './assets/particlesjs-config'\nimport ColoredScrollbars from './components/ColoredScrollbars'\n\nclass App extends Component {\n  render() {\n    return (\n        <ColoredScrollbars autoHeight autoHeightMin=\"100%\" autoHeightMax=\"100%\">\n            <div className=\"App\">\n                    <div className={\"Particles-container\"}>\n                        <Particles params={particlesConfig} className={\"Particles\"}/>\n                        <div className={\"Down-arrow-container\"}>\n                            <img src={downArrow} className={\"Down-arrow\"} alt={\"downArrow\"}/>\n                        </div>\n                    </div>\n                    <div className=\"App-header\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                        <img src={title} className=\"App-logo-wide\" alt=\"title\"/>\n                        <p className={\"Sub-header\"}> Cutting edge software development</p>\n                    </div>\n            </div>\n        </ColoredScrollbars>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WebFont from 'webfontloader';\n\nWebFont.load(\n    {\n        google:{\n            families: ['Open Sans:300,400,600,700']\n        }\n    }\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}