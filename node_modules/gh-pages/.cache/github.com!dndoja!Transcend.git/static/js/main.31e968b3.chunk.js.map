{"version":3,"sources":["assets/images/transcend_logo_colored.svg","assets/images/transcend_title.svg","assets/images/transcend_down_arrow.svg","assets/images/octagon_button.svg","assets/images/blueprints/MobileBlueprint.png","assets/images/blueprints/WebsiteBlueprint.png","assets/images/blueprints/UxBlueprint.png","assets/images/short_divider.svg","components/Card.js","components/OctagonButton/OctagonButton.js","components/SelectorLayout/SelectorLayout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","components_Card","_ref","props","react_default","a","createElement","className","src","image","alt","headerText","description","OctagonButton","onClick","text","SelectorLayout","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setSelectedItem","index","setState","selectedItem","options","state","_this2","items","_loop","i","push","length","Divider","updateSelectorItems","Component","App","scrollToFirstScreen","window","scrollTo","top","ref1","current","offsetTop","behavior","scrollToSecondScreen","ref2","React","createRef","desc","document","body","style","backgroundColor","arrowStyle","isMobile","particles_default","params","particlesConfig","logo","title","downArrow","ref","MobileBlueprint","WebBlueprint","UxBlueprint","octagon","SelectorLayout_SelectorLayout","Boolean","location","hostname","match","WebFont","load","google","families","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,u9BCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sYCGxCC,SAAA,SAAeC,GAAA,IAAEC,EAAFD,EAAEC,MAAF,OACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,MAAOF,UAAW,aAAcG,IAAK,eACrDN,EAAAC,EAAAC,cAAA,KAAGC,UAAW,eAAgBJ,EAAMQ,YACpCP,EAAAC,EAAAC,cAAA,KAAGC,UAAW,oBAAqBJ,EAAMS,2ECJlCC,SAAA,SAAAX,GAAA,IAAEC,EAAFD,EAAEC,MAAF,OACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBO,QAASX,EAAMW,SAC3CV,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,MAAOC,IAAKP,EAAMO,IAAKH,UAAU,uBACjDH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQJ,EAAMY,0BCDdC,qBACjB,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAKJI,gBAAkB,SAACC,GAAD,OAAWR,EAAKS,SAAS,CAACC,aAAeF,KAJvDR,EAAKW,QAAU,CAAC,SAAS,OACzBX,EAAKY,MAAO,CAACF,aAAc,GAHlBV,qFAQQ,IAAAa,EAAAV,KACjBA,KAAKW,MAAQ,GACb,IAFiB,IAAAC,EAAA,SAERC,GACLH,EAAKC,MAAMG,KAAK9B,EAAAC,EAAAC,cAAA,KAAGC,UAAW0B,IAAMH,EAAKD,MAAMF,aAAe,gBAAkB,2BAA4Bb,QAAS,kBAAMgB,EAAKN,gBAAgBS,KAAKH,EAAKF,QAAQK,KAC9JA,EAAIH,EAAKF,QAAQO,OAAS,GAC1BL,EAAKC,MAAMG,KAAK9B,EAAAC,EAAAC,cAAA,OAAKE,IAAK4B,IAAS1B,IAAI,UAAUH,UAAU,uBAH1D0B,EAAI,EAAGA,EAAIb,KAAKQ,QAAQO,OAAQF,IAAID,EAApCC,oCAWT,OAFAb,KAAKiB,sBAGHjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACVa,KAAKW,cAxBwBO,cCmE7BC,cAtDX,SAAAA,EAAYpC,GAAM,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmB,IACdtB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqB,GAAAhB,KAAAH,KAAMjB,KAKVqC,oBAAsB,WAClBC,OAAOC,SAAS,CACZC,IAAI1B,EAAK2B,KAAKC,QAAQC,UACtBC,SAAU,YATA9B,EAalB+B,qBAAuB,WACnBP,OAAOC,SAAS,CACZC,IAAI1B,EAAKgC,KAAKJ,QAAQC,UACtBC,SAAU,YAdd9B,EAAK2B,KAAOM,IAAMC,YAClBlC,EAAKgC,KAAOC,IAAMC,YAHJlC,wEAqBd,IAAImC,EAAO,wTACXC,SAASC,KAAKC,MAAMC,gBAAkB,UACtC,IAAIC,EAAaC,WAAW,8BAAgC,uBAC5D,OACItD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,uBACZH,EAAAC,EAAAC,cAACqD,EAAAtD,EAAD,CAAWuD,OAAQC,EAAiBtD,UAAW,eAEnDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAKsD,IAAMvD,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,OAAKE,IAAKuD,IAAOxD,UAAU,gBAAgBG,IAAI,UAC/CN,EAAAC,EAAAC,cAAA,KAAGC,UAAW,cAAd,sCACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAWkD,EAAY3C,QAASM,KAAKoB,qBACtCpC,EAAAC,EAAAC,cAAA,OAAKE,IAAKwD,IAAWzD,UAAW,aAAcG,IAAK,gBAG3DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsB0D,IAAK7C,KAAKwB,MAC3CxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACL,EAAD,CAAME,MAAO,CAACQ,WAAY,qBAAsBC,YAAawC,EAAM3C,MAAOyD,OAC1E9D,EAAAC,EAAAC,cAACL,EAAD,CAAME,MAAO,CAACQ,WAAY,kBAAmBC,YAAawC,EAAM3C,MAAO0D,OACvE/D,EAAAC,EAAAC,cAACL,EAAD,CAAME,MAAO,CAACQ,WAAY,YAAaC,YAAawC,EAAM3C,MAAO2D,QAErEhE,EAAAC,EAAAC,cAACO,EAAD,CAAeV,MAAO,CAACY,KAAK,gBAAiBL,IAAI,gBAAiBD,MAAM4D,IAASvD,QAAQM,KAAK4B,yBAElG5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2B0D,IAAK7C,KAAK6B,MAChD7C,EAAAC,EAAAC,cAACgE,EAAD,eAjDFhC,aCJEiC,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,8ECXNC,EAAQC,KACJ,CACIC,OAAO,CACHC,SAAU,CAAC,gCAKvBC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAAS5B,SAAS6B,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.31e968b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/transcend_logo_colored.f1cab7ea.svg\";","module.exports = __webpack_public_path__ + \"static/media/transcend_title.2c8b3cd1.svg\";","module.exports = __webpack_public_path__ + \"static/media/transcend_down_arrow.6a51bad8.svg\";","module.exports = __webpack_public_path__ + \"static/media/octagon_button.500538f3.svg\";","module.exports = __webpack_public_path__ + \"static/media/MobileBlueprint.ad549dcf.png\";","module.exports = __webpack_public_path__ + \"static/media/WebsiteBlueprint.d09b5f3d.png\";","module.exports = __webpack_public_path__ + \"static/media/UxBlueprint.ccb5d077.png\";","module.exports = __webpack_public_path__ + \"static/media/short_divider.02910e93.svg\";","import React from 'react';\r\nimport '../stylesheets/Card.css'\r\n\r\nexport default ({props}) =>\r\n    <div className=\"Card-container\">\r\n        <img src={props.image} className={\"Card-image\"} alt={\"card-image\"}/>\r\n        <p className={\"Card-header\"}>{props.headerText}</p>\r\n        <p className={\"Card-description\"}>{props.description}</p>\r\n    </div>","import React from 'react'\r\nimport './style.css'\r\n\r\nexport default ({props}) =>\r\n    <div className=\"Octagon-button\" onClick={props.onClick}>\r\n        <img src={props.image} alt={props.alt} className=\"Octagon-background\"/>\r\n        <p className=\"Text\">{props.text}</p>\r\n    </div>","import React,{Component} from 'react'\r\nimport Divider from '../../assets/images/short_divider.svg'\r\n\r\nimport \"./style.css\"\r\n\r\nexport default class SelectorLayout extends Component{\r\n    constructor(){\r\n        super();\r\n        this.options = [\"Mobile\",\"Web\"];\r\n        this.state ={selectedItem: 0}\r\n    }\r\n\r\n    setSelectedItem = (index) => this.setState({selectedItem : index});\r\n\r\n    updateSelectorItems(){\r\n        this.items = [];\r\n        for (let i = 0; i < this.options.length; i++){\r\n            this.items.push(<p className={i === this.state.selectedItem ? \"Selector-item\" : \"Selector-item unselected\"} onClick={() => this.setSelectedItem(i)}>{this.options[i]}</p>);\r\n            if (i < this.options.length - 1){\r\n                this.items.push(<img src={Divider} alt=\"Divider\" className=\"Selector-divider\"/>)\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        this.updateSelectorItems();\r\n\r\n        return(\r\n          <div className=\"Selector-container\">\r\n              {this.items}\r\n          </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport logo from './assets/images/transcend_logo_colored.svg';\r\nimport title from './assets/images/transcend_title.svg';\r\nimport downArrow from './assets/images/transcend_down_arrow.svg'\r\nimport octagon from './assets/images/octagon_button.svg'\r\nimport './stylesheets/App.css';\r\nimport Particles from 'react-particles-js';\r\nimport particlesConfig from './assets/particlesjs-config'\r\nimport Card from './components/Card'\r\nimport MobileBlueprint from './assets/images/blueprints/MobileBlueprint.png'\r\nimport WebBlueprint from './assets/images/blueprints/WebsiteBlueprint.png'\r\nimport UxBlueprint from './assets/images/blueprints/UxBlueprint.png'\r\nimport {isMobile} from 'react-device-detect'\r\nimport {OctagonButton} from './components/OctagonButton'\r\nimport {SelectorLayout} from './components/SelectorLayout'\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.ref1 = React.createRef();\r\n        this.ref2 = React.createRef();\r\n    }\r\n\r\n    scrollToFirstScreen = () => {\r\n        window.scrollTo({\r\n            top:this.ref1.current.offsetTop,\r\n            behavior: \"smooth\"\r\n        })\r\n    };\r\n\r\n    scrollToSecondScreen = () => {\r\n        window.scrollTo({\r\n            top:this.ref2.current.offsetTop,\r\n            behavior: \"smooth\"\r\n        })\r\n    };\r\n\r\n    render() {\r\n        let desc = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque euismod ex non elit sollicitudin, in efficitur sapien tincidunt. Aenean in metus semper, ornare purus at, interdum velit. Suspendisse porttitor diam odio, vehicula viverra risus bibendum eu. Donec ut erat nec turpis varius rutrum eu eget orci. ';\r\n        document.body.style.backgroundColor = '#0F0929';\r\n        let arrowStyle = isMobile ? \"Down-arrow-container-mobile\" : \"Down-arrow-container\";\r\n        return (\r\n            <div className=\"App\" >\r\n                <div className={\"Particles-container\"}>\r\n                    <Particles params={particlesConfig} className={\"Particles\"}/>\r\n                </div>\r\n                <div className=\"Hero-screen\">\r\n                    <div className=\"Hero-screen-padding\"/>\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n                    <img src={title} className=\"App-logo-wide\" alt=\"title\" />\r\n                    <p className={\"Sub-header\"}> Cutting edge software development</p>\r\n                    <div className={arrowStyle} onClick={this.scrollToFirstScreen} >\r\n                        <img src={downArrow} className={\"Down-arrow\"} alt={\"downArrow\"} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"Full-page-container\" ref={this.ref1}>\r\n                    <div className=\"Card-grid\">\r\n                        <Card props={{headerText: 'Mobile development', description: desc, image: MobileBlueprint}}/>\r\n                        <Card props={{headerText: 'Web development', description: desc, image: WebBlueprint}}/>\r\n                        <Card props={{headerText: 'UX design', description: desc, image: UxBlueprint}}/>\r\n                    </div>\r\n                    <OctagonButton props={{text:\"View our work\", alt:\"View our work\", image:octagon, onClick:this.scrollToSecondScreen}}/>\r\n                </div>\r\n                <div className=\"Full-page-container-flat\" ref={this.ref2}>\r\n                    <SelectorLayout/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './stylesheets/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport WebFont from 'webfontloader';\r\n\r\nWebFont.load(\r\n    {\r\n        google:{\r\n            families: ['Open Sans:300,400,600,700']\r\n        }\r\n    }\r\n);\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}